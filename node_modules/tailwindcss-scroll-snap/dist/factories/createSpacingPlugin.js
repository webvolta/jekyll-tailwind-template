"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.spacingConfig = exports.negativeSpacingConfig = exports.getConfigType = exports.getSpacingPropertyName = exports.SpacingDirection = void 0;
const prefixNegativeModifiers_1 = __importDefault(require("tailwindcss/lib/util/prefixNegativeModifiers"));
const negative_1 = __importDefault(require("../utils/negative"));
const lodash_1 = __importDefault(require("lodash"));
/**
 * Available spacing directions.
 *
 * @export
 * @enum {number}
 */
var SpacingDirection;
(function (SpacingDirection) {
    SpacingDirection["Top"] = "top";
    SpacingDirection["Bottom"] = "bottom";
    SpacingDirection["Left"] = "left";
    SpacingDirection["Right"] = "right";
    SpacingDirection["Vertical"] = "y";
    SpacingDirection["Horizontal"] = "x";
})(SpacingDirection = exports.SpacingDirection || (exports.SpacingDirection = {}));
/**
 * Gets the spacing property name for a given property and direction.
 *
 * @export
 * @param {string} property
 * @param {SpacingDirection} direction
 * @returns
 */
function getSpacingPropertyName(property, direction) {
    return `${lodash_1.default.kebabCase(property)}-${direction}`;
}
exports.getSpacingPropertyName = getSpacingPropertyName;
/**
 * Add spacing utilities to Tailwind.
 *
 * @export
 * @param {SpacingType} type The type of spacing.
 * @param {string} property The property that applies the spacing.
 * @param {string} shortname The short name for utility classes names.
 * @param {TailwindPluginHelpers} { e, theme, variants, addUtilities }
 */
function default_1(type, shortname, property, { e, theme, variants, addUtilities }) {
    const prefix = `${lodash_1.default.kebabCase(shortname)}-${type.charAt(0)}`; // property-name-my-4
    const generators = [
        // 4-way spacing
        (size, modifier) => {
            return {
                [`.${e(prefixNegativeModifiers_1.default(prefix, modifier))}`]: {
                    [property]: `${size}`,
                },
            };
        },
        // 2-way spacing
        (size, modifier) => ({
            [`.${e(prefixNegativeModifiers_1.default(`${prefix}y`, modifier))}`]: {
                [getSpacingPropertyName(property, SpacingDirection.Top)]: `${size}`,
                [getSpacingPropertyName(property, SpacingDirection.Bottom)]: `${size}`,
            },
            [`.${e(prefixNegativeModifiers_1.default(`${prefix}x`, modifier))}`]: {
                [getSpacingPropertyName(property, SpacingDirection.Left)]: `${size}`,
                [getSpacingPropertyName(property, SpacingDirection.Right)]: `${size}`,
            },
        }),
        // 1-way spacing
        (size, modifier) => ({
            [`.${e(prefixNegativeModifiers_1.default(`${prefix}t`, modifier))}`]: {
                [getSpacingPropertyName(property, SpacingDirection.Top)]: `${size}`,
            },
            [`.${e(prefixNegativeModifiers_1.default(`${prefix}r`, modifier))}`]: {
                [getSpacingPropertyName(property, SpacingDirection.Right)]: `${size}`,
            },
            [`.${e(prefixNegativeModifiers_1.default(`${prefix}b`, modifier))}`]: {
                [getSpacingPropertyName(property, SpacingDirection.Bottom)]: `${size}`,
            },
            [`.${e(prefixNegativeModifiers_1.default(`${prefix}l`, modifier))}`]: {
                [getSpacingPropertyName(property, SpacingDirection.Left)]: `${size}`,
            },
        }),
    ];
    addUtilities(lodash_1.default.flatMap(generators, generator => {
        return lodash_1.default.flatMap(theme(property, getConfigType(type, theme)), generator);
    }), variants(property));
}
exports.default = default_1;
function getConfigType(type, theme) {
    return 'margin' === type
        ? exports.negativeSpacingConfig(theme)
        : exports.spacingConfig(theme);
}
exports.getConfigType = getConfigType;
exports.negativeSpacingConfig = (theme) => (Object.assign(Object.assign({ auto: 'auto' }, theme('spacing')), negative_1.default(theme('spacing'))));
exports.spacingConfig = (theme) => theme('spacing');
