"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
/**
 * Add utilities to Tailwind.
 *
 * @export
 * @param {string} property The Tailwind config key, which will also be the CSS property. Should be in the CSS-in-JS format.
 * @param {*} config A map of class names => property values.
 *                   The property values can be a string tuple where the first value would be the property name,
 *                   and the second value the property value.
 * @param {TailwindPluginHelpers} helpers The Tailwind plugin helpers object.
 */
function default_1(property, config, { e, theme, variants, addUtilities }) {
    addUtilities(lodash_1.default.map(theme(property, config), (value, name) => ({
        [`.${e(name)}`]: {
            [getPropertyName(property, value)]: getValue(value),
        },
    })), variants(property, []));
}
exports.default = default_1;
/**
 * Parses the property name from the value to detect tuples.
 *
 * @param {string} property
 * @param {(string | [string, string])} value
 * @returns
 */
function getPropertyName(property, value) {
    return Array.isArray(value) ? value[0] : property;
}
/**
 * Parses the actual value name from the value variable to detect tuples.
 *
 * @param {string} property
 * @param {(string | [string, string])} value
 * @returns
 */
function getValue(value) {
    return Array.isArray(value) ? value[1] : value;
}
